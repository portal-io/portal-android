package com.whaley.biz.setting.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_VIDEO_BEAN".
*/
public class LocalVideoBeanDao extends AbstractDao<LocalVideoBean, String> {

    public static final String TABLENAME = "LOCAL_VIDEO_BEAN";

    /**
     * Properties of entity LocalVideoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Size = new Property(2, long.class, "size", false, "SIZE");
        public final static Property Path = new Property(3, String.class, "path", false, "PATH");
        public final static Property Duration = new Property(4, long.class, "duration", false, "DURATION");
        public final static Property PicPath = new Property(5, String.class, "picPath", false, "PIC_PATH");
        public final static Property Progress = new Property(6, int.class, "progress", false, "PROGRESS");
        public final static Property ProgressSize = new Property(7, long.class, "progressSize", false, "PROGRESS_SIZE");
        public final static Property LastUpdateTime = new Property(8, long.class, "lastUpdateTime", false, "LAST_UPDATE_TIME");
        public final static Property IsDowloading = new Property(9, boolean.class, "isDowloading", false, "IS_DOWLOADING");
        public final static Property Speed = new Property(10, long.class, "speed", false, "SPEED");
    }


    public LocalVideoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LocalVideoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_VIDEO_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"SIZE\" INTEGER NOT NULL ," + // 2: size
                "\"PATH\" TEXT," + // 3: path
                "\"DURATION\" INTEGER NOT NULL ," + // 4: duration
                "\"PIC_PATH\" TEXT," + // 5: picPath
                "\"PROGRESS\" INTEGER NOT NULL ," + // 6: progress
                "\"PROGRESS_SIZE\" INTEGER NOT NULL ," + // 7: progressSize
                "\"LAST_UPDATE_TIME\" INTEGER NOT NULL ," + // 8: lastUpdateTime
                "\"IS_DOWLOADING\" INTEGER NOT NULL ," + // 9: isDowloading
                "\"SPEED\" INTEGER NOT NULL );"); // 10: speed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_VIDEO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalVideoBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getSize());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(4, path);
        }
        stmt.bindLong(5, entity.getDuration());
 
        String picPath = entity.getPicPath();
        if (picPath != null) {
            stmt.bindString(6, picPath);
        }
        stmt.bindLong(7, entity.getProgress());
        stmt.bindLong(8, entity.getProgressSize());
        stmt.bindLong(9, entity.getLastUpdateTime());
        stmt.bindLong(10, entity.getIsDowloading() ? 1L: 0L);
        stmt.bindLong(11, entity.getSpeed());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalVideoBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getSize());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(4, path);
        }
        stmt.bindLong(5, entity.getDuration());
 
        String picPath = entity.getPicPath();
        if (picPath != null) {
            stmt.bindString(6, picPath);
        }
        stmt.bindLong(7, entity.getProgress());
        stmt.bindLong(8, entity.getProgressSize());
        stmt.bindLong(9, entity.getLastUpdateTime());
        stmt.bindLong(10, entity.getIsDowloading() ? 1L: 0L);
        stmt.bindLong(11, entity.getSpeed());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LocalVideoBean readEntity(Cursor cursor, int offset) {
        LocalVideoBean entity = new LocalVideoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getLong(offset + 2), // size
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // path
            cursor.getLong(offset + 4), // duration
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // picPath
            cursor.getInt(offset + 6), // progress
            cursor.getLong(offset + 7), // progressSize
            cursor.getLong(offset + 8), // lastUpdateTime
            cursor.getShort(offset + 9) != 0, // isDowloading
            cursor.getLong(offset + 10) // speed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalVideoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSize(cursor.getLong(offset + 2));
        entity.setPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDuration(cursor.getLong(offset + 4));
        entity.setPicPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProgress(cursor.getInt(offset + 6));
        entity.setProgressSize(cursor.getLong(offset + 7));
        entity.setLastUpdateTime(cursor.getLong(offset + 8));
        entity.setIsDowloading(cursor.getShort(offset + 9) != 0);
        entity.setSpeed(cursor.getLong(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LocalVideoBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(LocalVideoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalVideoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
